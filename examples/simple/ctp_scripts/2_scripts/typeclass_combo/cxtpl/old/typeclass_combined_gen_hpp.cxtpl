[[~ // parameters begin

using namespace cxtpl_utils;

const auto headerGuard
  = GetWithDefault<std::string>(cxtpl_params, "headerGuard", "");

const auto generator_path
  = GetWithDefault<std::string>(cxtpl_params, "generator_path", "");

std::vector<std::string> generator_includes
  = GetWithDefault<std::vector<std::string>>
      (cxtpl_params, "generator_includes", std::vector<std::string>{});

std::string OriginalTypeclassBaseCode
  = GetWithDefault<std::string>
      (cxtpl_params, "OriginalTypeclassBaseCode", std::string{});

std::vector<std::string> GeneratedTypeclassNames
  = GetWithDefault<std::vector<std::string>>
      (cxtpl_params, "GeneratedTypeclassNames",
        std::vector<std::string>{});

reflection::ClassInfoPtr ReflectedStructInfo
  = GetWithDefault<reflection::ClassInfoPtr>
      (cxtpl_params, "ReflectedStructInfo", nullptr);

const size_t ReflectedStructInfoMethodsSize =
    ReflectedStructInfo->methods.size();

// parameters end
/* no newline */ ~]][[~]]
// This is generated file. Do not modify directly.
// Path to the code generator: [[+ generator_path +]].

[[+ startHeaderGuard(headerGuard) /* no newline */ +]][[~]]

[[~]] for(const auto& fileName: generator_includes) {
[[+ fileName +]]
[[~]] } // end for

#include <array>
#include <functional>
#include <memory>

namespace cxxctp {
namespace generated {

template<>
struct _tc_combined_t<[[~]] /* no newline */
  [[+ typeclassComboDecls(GeneratedTypeclassNames) +]][[~]] /* no newline */
> {
    // Default initializer creates an empty _tc_combined_t.
    _tc_combined_t() = default;

    _tc_combined_t(std::reference_wrapper<
      _tc_combined_t<[[+ typeclassComboDecls(GeneratedTypeclassNames) +]]>>&& rhs) noexcept {
        puts("_tc_combined_t<[[+ typeclassComboDecls(GeneratedTypeclassNames) +]]> ref copy ctor");
        if(rhs.get())
            my_interface_model = rhs.get().my_interface_model;
    }

    /// \note moves passed argument
    template <
        class T,
        typename = IsNotReference<T>,
        typename std::enable_if<!std::is_same<_tc_combined_t, T>::value>::type* = nullptr
        >
    _tc_combined_t(std::shared_ptr<T>&& u) noexcept :
                                                      my_interface_model(std::move(u)) {
        static_assert(!std::is_const<typename std::remove_reference<T>::type>::value,
                      "You've attempted a cast to a const rvalue reference. "
                      "Make sure you're not trying to move a const object, "
                      "as this would likely result in a copy not a move. "
                      "If you need it for real, call std::move(...) instead.");
        puts("_tc_combined_t<[[+ typeclassComboDecls(GeneratedTypeclassNames) +]]> called, moves passed argument");
    }

    template <
        class T,
        typename = IsNotReference<T>,
        typename std::enable_if<!std::is_same<_tc_combined_t, T>::value>::type* = nullptr
        >
    _tc_combined_t(const std::shared_ptr<T>& u) noexcept :
                                                           my_interface_model(u) {
        puts("_tc_combined_t<[[+ typeclassComboDecls(GeneratedTypeclassNames) +]]> called, shares passed argument");
    }

    template <
        class T,
        typename std::enable_if<!std::is_same<_tc_combined_t, T>::value>::type* = nullptr
        >
    _tc_combined_t(const std::reference_wrapper<T>& u) noexcept :
                                                                  my_interface_model(
                                                                      std::make_shared<
                                                                          _tc_impl_t<std::reference_wrapper<T>, [[+ GeneratedTypeclassName +]]>>
                                                                      (std::forward<const std::reference_wrapper<std::decay_t<T>>>(u))) {
        puts("_tc_combined_t{T} reference_wrapper called");
    }

    template<
        typename T,
        typename = IsNotReference<T>,
        typename std::enable_if<!std::is_same<_tc_combined_t, T>::value>::type* = nullptr
        >
    _tc_combined_t(const T&& u) noexcept :
                                           my_interface_model(
                                               std::make_shared<
                                                   _tc_impl_t<T, GeneratedTypeclassName >>
                                               (std::forward<const std::decay_t<T>>(u))) {
        puts("_tc_combined_t{T} called");
    }

    // Call clone for copy ctor/assign.
    explicit _tc_combined_t(const _tc_combined_t& rhs) noexcept {
        puts("_tc_combined_t<[[+ typeclassComboDecls(GeneratedTypeclassNames) +]]> copy ctor");
        if(rhs)
            my_interface_model = rhs.my_interface_model->clone();
    }

    // Call move_clone for move ctor/assign.
    explicit _tc_combined_t(_tc_combined_t&& rhs) noexcept {
        if(rhs)
            my_interface_model = rhs.my_interface_model->move_clone();
    }

    // The preferred initializer for a _tc_combined_t. This constructs an _tc_impl_t of
    // type_t on the heap, and stores the pointer in a new _tc_combined_t.
    template<
        typename type_t,
        typename... args_t,
        typename = IsNotReference<type_t>
        >
    static _tc_combined_t construct(args_t&&... args) noexcept {
        return _tc_combined_t(std::make_shared<_tc_impl_t<type_t, [[+ GeneratedTypeclassName +]]> >(
            std::forward<args_t>(args)...
            ));
    }

    _tc_combined_t& operator=(_tc_combined_t&& rhs) noexcept {
        my_interface_model.reset();
        if(rhs)
            my_interface_model = rhs.my_interface_model->move_clone();
        return *this;
    }

    _tc_combined_t& operator=(const _tc_combined_t& rhs) noexcept {
        my_interface_model.reset();
        if(rhs)
            my_interface_model = rhs.my_interface_model->clone();
        return *this;
    }

    // A virtual dtor triggers the dtor in the impl.
    virtual ~_tc_combined_t() noexcept { }

[[~]]  { // startscope
[[~]]    for(const auto& method: ReflectedStructInfo->methods) {
[[~]]      const size_t methodParamsSize = method->params.size();
[[~]]      const bool needPrint = !method->isImplicit
[[~]]          && !method->isOperator
[[~]]          && !method->isCtor
[[~]]          && !method->isDtor;
[[~]]      if(method->isTemplate()) {
template< [[+ templateParamsFullDecls(method->tplParams) +]] >
[[~]]      } // method->isTemplate
[[~]]      if(needPrint) {
[[+ method->isExplicitCtor ? "explicit " : "" +]][[~]] /* no newline */
[[+ method->isConstexpr ? "constexpr " : "" +]][[~]] /* no newline */
[[+ method->isStatic ? "static " : "" +]][[~]] /* no newline */
[[+ method->returnType->getPrintedName() +]][[~]] /* no newline */
[[+ " " +]][[~]] /* no newline */
[[+ method->name +]][[~]] /* no newline */
(
[[+ paramsFullDecls(method->params) +]][[~]] /* no newline */
) [[~]] /* no newline */
[[+ method->isConst ? "const " : "" +]][[~]] /* no newline */
[[+ method->isNoExcept ? "noexcept " : "" +]][[~]] /* no newline */
  {
    if(!my_interface_model) {
        std::terminate();
    }
    my_interface_model->__[[+ method->name +]]([[+ paramsCallDecls(method->params) +]]);
  }
[[~ /* newline */ ~]]
[[~]]      } // needPrint
[[~]]    } // methods endfor
[[~]]  } // endscope

    /*

  _tc_combined_t& operator=(const _tc_combined_t<template_interface<int, const std::string&>>& rhs) noexcept {
    my_interface_model.reset();
    if(rhs) {
      my_interface_model = rhs.ref_model()->clone();
    }
    return *this;
  }

  _tc_combined_t& operator=(const _tc_combined_t<my_interface2>& rhs) noexcept {
    my_interface2_model.reset();
    if(rhs) {
      my_interface2_model = rhs.ref_model()->clone();
    }
    return *this;
  }

  void reset() noexcept {
    my_interface_model.reset();
    my_interface2_model.reset();
  }

  template<
  typename T,
  typename C,
  typename std::enable_if<std::is_same<my_interface2, T>::value>::type* = nullptr
  >
  T& ref_concrete() noexcept {
    if(!my_interface2_model) {
      //throw std::runtime_error("my_interface_model2 not set");
      std::terminate();
    }
    return my_interface2_model->ref_concrete<C>();
  }

  template<
  typename T,
  typename C,
  typename std::enable_if<std::is_same<template_interface<int, const std::string&>, T>::value>::type* = nullptr
  >
  T& ref_concrete() noexcept {
    if(!my_interface_model) {
      //throw std::runtime_error("my_interface_model2 not set");
      std::terminate();
    }
    return my_interface_model->ref_concrete<C>();
  }

  explicit operator bool() const noexcept {
    return (bool)my_interface_model && (bool)my_interface2_model;
  }

  template<typename T>
  std::shared_ptr<_tc_model_t<T>> ref_model() const noexcept {
    return nullptr;
  }

  template<
  typename T,
  typename U,
  typename std::enable_if<std::is_same<template_interface<int, const std::string&>, T>::value>::type* = nullptr
  >
  void create_model(const U&& u) noexcept {
    my_interface_model = std::make_shared<
      _tc_impl_t<U, template_interface<int, const std::string&>>>
        (std::forward<const std::decay_t<U>>(u));
    puts("create_my_interface_model{T} called");
  }

  template<
  typename T,
  typename U,
  typename std::enable_if<std::is_same<my_interface2, T>::value>::type* = nullptr
  >
  void create_model(const U&& u) noexcept {
    my_interface2_model = std::make_shared<
      _tc_impl_t<U, my_interface2>>
        (std::forward<const std::decay_t<U>>(u));
    puts("create_my_interface2_model{T} called");
  }

  template <class T>
  void set_common_model(const T&& u) noexcept {
    create_model<template_interface<int, const std::string&>>(std::forward<const std::decay_t<T>>(u));
    create_model<my_interface2>(std::forward<const std::decay_t<T>>(u));
    puts("set_common_model{T} called");
  }

  template<
  typename T,
  typename U,
  typename std::enable_if<std::is_same<my_interface2, T>::value>::type* = nullptr
  >
  bool has_model() const noexcept {
    return (bool)my_interface2_model;
  }

  template<
  typename T,
  typename U,
  typename std::enable_if<std::is_same<template_interface<int, const std::string&>, T>::value>::type* = nullptr
  >
  bool has_model() const noexcept {
    return (bool)my_interface_model;
  }

  template<
  typename T,
  typename std::enable_if<std::is_same<template_interface<int, const std::string&>, T>::value>::type* = nullptr
  >
  std::unique_ptr<_tc_model_t<template_interface<int, const std::string&>>>
  clone_model() const noexcept {
    if(!my_interface_model) {
      //throw std::runtime_error("my_interface_model not set");
      std::terminate();
    }
    return my_interface_model->clone();
  }

  template<
  typename T,
  typename std::enable_if<std::is_same<my_interface2, T>::value>::type* = nullptr
  >
  std::unique_ptr<_tc_model_t<my_interface2>>
  clone_model() const noexcept {
    if(!my_interface2_model) {
      //throw std::runtime_error("my_interface_model not set");
      std::terminate();
    }
    return my_interface2_model->clone();
  }
    */

    typeclassReplaceModelsDecls(GeneratedTypeclassNames)

    /*const size_t getModelTypeIndex() {
        if(!my_interface_model) {
            std::terminate();
        }
        return my_interface_model->getModelTypeIndex();
    }

    template <typename T>
    static const size_t getGlobalTypeIndex() {
        return _tc_registry<[[+ GeneratedTypeclassName +]]>
            ::getTypeIndex<T>();
    }

    template <typename T>
    T& ref_concrete() noexcept {
        if(!my_interface_model || my_interface_model->getModelTypeIndex()
                != getGlobalTypeIndex<T>()) {
            std::terminate();
        }
        return my_interface_model->ref_concrete<T>();
    }*/

#if 0
  operator const _tc_combined_t<my_interface2>() const noexcept {
      return _tc_combined_t<
        my_interface2>{ my_interface2_model/*->clone()*/ };
  }

  operator const _tc_combined_t<template_interface<int, const std::string&>>() const noexcept {
      return _tc_combined_t<
        template_interface<int, const std::string&>>
          { my_interface_model/*->clone()*/ };
  }
#endif

    template <typename U>
    bool can_convert() const
    {
        return false;
    }

    // This is actually a unique_ptr to an impl type. We store a pointer to
    // the base type and rely on _tc_model_t's virtual dtor to free the object.
private:
    [[+ typeclassModelsDecls(GeneratedTypeclassNames) +]]
};

} // namespace cxxctp
} // namespace generated

[[+ endHeaderGuard(headerGuard) /* no newline */ +]][[~]]
