// This is generated file. Do not modify directly.
// Path to the code generator: {{generator_path}}.

{% if headerGuard is defined %}
 #ifndef {{headerGuard}}
 #define {{headerGuard}}
{% else %}
 #pragma once
{% endif %}

 #include <array>
 #include <functional>

namespace cxxctp {
namespace generated {

struct {{GeneratedEnumName}}
{
  typedef {{GeneratedEnumType}} _enumerated_t;
  typedef _enumerated_t _value_t; // alias
  typedef const char* const _name_t;

  enum class _enumerated : _enumerated_t {
    {% for value, name in GeneratedEnumItems %}
    {{name}} = {{value}} {% if not loop.last %},{% endif %} // {{name}} = {{value}} at {{loop.index0}}
    {% else %}
      // TODO: report error
    {% endfor %}
  };

  // allows to hide some enum values
  static constexpr auto NONE     = _enumerated::NONE;
  static constexpr auto Box     = _enumerated::Box;
  static constexpr auto Sphere  = _enumerated::Sphere;
  static constexpr auto TOTAL  = _enumerated::TOTAL;

  _enumerated value_;

  static constexpr size_t _count = 3;

  using value_container =
    std::array<_enumerated_t, _count>;
  using value_iterator =
    typename value_container::iterator;
  using const_value_iterator =
    typename value_container::const_iterator;

  const_value_iterator values_begin() const;
  const_value_iterator values_end() const;

  using name_container =
    std::array<_name_t, _count>;
  using name_iterator =
    typename name_container::iterator;
  using const_name_iterator =
    typename name_container::const_iterator;

  const_name_iterator names_begin() const;
  const_name_iterator names_end() const;

  friend std::ostream& operator << ( std::ostream& outs, const {{GeneratedEnumName}}& val ); /*noexcept*/
  friend std::istream& operator >> ( std::istream& ins, {{GeneratedEnumName}}& val ); /*noexcept*/

  friend {{GeneratedEnumName}} operator & (
    const {{GeneratedEnumName}}& lhs, const {{GeneratedEnumName}}& rhs ); /*noexcept*/
  friend {{GeneratedEnumName}} operator ^ (
    const {{GeneratedEnumName}}& lhs, const {{GeneratedEnumName}}& rhs ); /*noexcept*/
  friend {{GeneratedEnumName}} operator ~ (
    const {{GeneratedEnumName}}& rhs ); /*noexcept*/
  friend {{GeneratedEnumName}} operator | (
    const {{GeneratedEnumName}}& lhs, const {{GeneratedEnumName}}& rhs ); /*noexcept*/
  friend {{GeneratedEnumName}} operator &= (
    {{GeneratedEnumName}}& lhs, const {{GeneratedEnumName}}& rhs ); /*noexcept*/
  friend {{GeneratedEnumName}} operator ^= (
    {{GeneratedEnumName}}& lhs, const {{GeneratedEnumName}}& rhs ); /*noexcept*/
  friend {{GeneratedEnumName}} operator |= (
    {{GeneratedEnumName}}& lhs, const {{GeneratedEnumName}}& rhs ); /*noexcept*/

  friend bool operator <(const {{GeneratedEnumName}} &a, const {{GeneratedEnumName}} &b);
  friend bool operator <=(const {{GeneratedEnumName}} &a, const {{GeneratedEnumName}} &b);
  friend bool operator >(const {{GeneratedEnumName}} &a, const {{GeneratedEnumName}} &b);
  friend bool operator >=(const {{GeneratedEnumName}} &a, const {{GeneratedEnumName}} &b);

  friend _enumerated operator & (
    const _enumerated& lhs, const _enumerated& rhs ); /*noexcept*/
  friend _enumerated operator ^ (
    const _enumerated& lhs, const _enumerated& rhs ); /*noexcept*/
  friend _enumerated operator ~ (
    const _enumerated& rhs ); /*noexcept*/
  friend _enumerated operator | (
    const _enumerated& lhs, const _enumerated& rhs ); /*noexcept*/
  friend _enumerated operator &= (
    _enumerated& lhs, const _enumerated& rhs ); /*noexcept*/
  friend _enumerated operator ^= (
    _enumerated& lhs, const _enumerated& rhs ); /*noexcept*/
  friend _enumerated operator |= (
    _enumerated& lhs, const _enumerated& rhs ); /*noexcept*/

  bool test_flag ( _enumerated flag ) const noexcept;

  {{GeneratedEnumName}}(const _enumerated value = _enumerated::TOTAL);

  operator _enumerated() const;

  ~{{GeneratedEnumName}}() {}

  const {{GeneratedEnumName}}& operator =({{GeneratedEnumName}} /*todo: support NOT only int*/ dummy) /*override*/ noexcept;

  const {{GeneratedEnumName}}& operator =(_enumerated_t /*todo: support NOT only int*/ dummy) /*override*/ noexcept;

  const {{GeneratedEnumName}}& operator =(const char* dummy) noexcept;

  static _enumerated FromString(const char* txt) noexcept;

  static _enumerated_t ToNumber(const _enumerated val) noexcept;

  static const char* ToString(const _enumerated val) /*override*/ noexcept;

  static _enumerated FromNumber(const _enumerated_t val) noexcept;

  const char* ToString() const /*override*/ noexcept;

  _enumerated_t ToNumber() const noexcept;

  /// \note for large number of elements
  /// consider <map> containing string hashes
  static constexpr std::array<_enumerated_t, _count> values_ =
      {
        {% for value, name in GeneratedEnumItems %}
        {{value}} {% if not loop.last %},{% endif %} // {{name}}
        {% else %}
          // TODO: report error
        {% endfor %}
      };

  static constexpr std::array<_name_t, _count> names_ =
      {
        {% for value, name in GeneratedEnumItems %}
        "{{name}}" {% if not loop.last %},{% endif %} // {{value}}
        {% else %}
          // TODO: report error
        {% endfor %}
      };
};

} // namespace cxxctp
} // namespace generated

// Support using as key in dictionaries and maps
namespace std {
    template <>
    struct hash<cxxctp::generated::{{GeneratedEnumName}}> {
        size_t operator()(const cxxctp::generated::{{GeneratedEnumName}}& ) const;
    };
}

{% if headerGuard is defined %}
 #endif // {{headerGuard}}
{% endif %}
